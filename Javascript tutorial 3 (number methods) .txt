
Методы номеров:

Все методы номер может быть использован на любом типе чисел (литералы, переменные или выражения):

ToString () возвращает число в виде строки.

var x = 123;
x.toString();            // returns 123 from variable x
(123).toString();        // returns 123 from literal 123
(100 + 23).toString();   // returns 123 from expression 100 + 23


valueOf () возвращает номер как номер.

пример
var x = 123;
x.valueOf();            // returns 123 from variable x
(123).valueOf();        // returns 123 from literal 123
(100 + 23).valueOf();   // returns 123 from expression 100 + 23

Метод valueOf () используется внутри JavaScript для преобразования Количество объектов в примитивные значения.
Все типы данных JavaScript имеют valueOf () и метод ToString ().


toExponential () возвращает строку, с числом закругленного и письменным использованием экспоненциального обозначения.

() Параметр определяет количество символов после запятой:

пример
var x = 9.656;
x.toExponential(2);     // returns 9.66e+0
x.toExponential(4);     // returns 9.6560e+0
x.toExponential(6);     // returns 9.656000e+0

Параметр является необязательным. Если вы не укажете его, JavaScript не будет округлить число.

пример
9.656e+0


toFixed () возвращает строку с числом , записанным с заданным числом знаков после запятой:

пример
var x = 9.656;
x.toFixed(0);           // returns 10
x.toFixed(2);           // returns 9.66
x.toFixed(4);           // returns 9.6560
x.toFixed(6);           // returns 9.656000

toFixed (2) идеально подходит для работы с деньгами.



toPrecision () возвращает строку с числом , записанным с заданной длиной:

пример
var x = 9.656;
x.toPrecision();        // returns 9.656
x.toPrecision(2);       // returns 9.7
x.toPrecision(4);       // returns 9.656
x.toPrecision(6);       // returns 9.65600


Есть 3 метода JavaScript, которые могут быть использованы для преобразования переменных чисел:

Метод Number ()      Returns a number, converted from its argument.
Number () может быть использован для преобразования переменных JavaScript на номера:

пример
Number(true);          // returns 1
Number(false);         // returns 0
Number("10");          // returns 10
Number("  10");        // returns 10
Number("10  ");        // returns 10
Number("10 20");       // returns NaN 
Number("John");        // returns NaN

Если число не может быть преобразован, NaN (Not a Number) возвращается.
Number () method in Dates

Number () можно также преобразовать дату в число:

пример
Number(new Date("2017-09-30"));    // returns 1506729600000
Метод Number () выше возвращает количество миллисекунд с 1.1.1970.


Метод ParseInt ()    Parses its argument and returns an integer

ParseInt () разбирает строку и возвращает целое число. Пробелы разрешены. Только первый номер возвращается:

пример
parseInt("10");         // returns 10
parseInt("10.33");      // returns 10
parseInt("10 20 30");   // returns 10
parseInt("10 years");   // returns 10
parseInt("years 10");   // returns NaN 
Если число не может быть преобразован, NaN (Not a Number) возвращается.


Метод parseFloat ()  Parses its argument and returns a floating point number

parseFloat () разбирает строку и возвращает число. Пробелы разрешены. Только первый номер возвращается:

пример
parseFloat("10");        // returns 10
parseFloat("10.33");     // returns 10.33
parseFloat("10 20 30");  // returns 10
parseFloat("10 years");  // returns 10
parseFloat("years 10");  // returns NaN
Если число не может быть преобразован, NaN (Not a Number) возвращается.


Number Свойства

Property	Description
MAX_VALUE	Returns the largest number possible in JavaScript
MIN_VALUE	Returns the smallest number possible in JavaScript
NEGATIVE_INFINITY	Represents negative infinity (returned on overflow)
NaN	Represents a "Not-a-Number" value
POSITIVE_INFINITY	Represents infinity (returned on overflow)

пример
var x = Number.MAX_VALUE; //1.7976931348623157e+308
var x = Number.MIN_VALUE; //5e-324
var x = Number.NEGATIVE_INFINITY; //-Infinity
var x = Number.POSITIVE_INFINITY; //Infinity
var x = Number.NaN; //NaN

Эти свойства могут быть доступны только number.MAX_VALUE.

Использование MyNumber.MAX_VALUE, где MyNumber переменная, выражение или значение, будет возвращать неопределенным:

пример
var x = 6;
var y = x.MAX_VALUE;    // y becomes undefined